{"version":3,"sources":["webpack:///./src/components/BlogPostNavigation.js","webpack:///./src/components/MasonryCols.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///./src/templates/PortfolioPostSingle.js"],"names":["previous","next","className","to","frontmatter","path","title","Masonry","children","gap","rest","minWidth","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","cols","Array","map","forEach","child","push","fillCols","data-uk-lightbox","_","index","PortfolioPostSingle","data","pageContext","markdownRemark","projectLink","showMasonry","html","masonryImages","allFile","edges","filter","node","childImageSharp","src","fluid","foundFeatured","match","Layout","href","dangerouslySetInnerHTML","__html","image","BlogPostNavigation"],"mappings":"2FAAA,qCAGe,oBAAGA,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAb,OACb,yBAAKC,UAAU,YACb,yBAAKA,UAAS,kBAAmBF,GAAY,8BAC1CA,GACC,kBAAC,IAAD,CAAMG,GAAIH,EAASI,YAAYC,MAA/B,GACML,EAASI,YAAYE,QAI/B,yBAAKJ,UAAS,kBAAmBD,GAAQ,0BACtCA,GACC,kBAAC,IAAD,CAAME,GAAIF,EAAKG,YAAYC,MAA3B,GAAqCJ,EAAKG,YAAYE,W,+GCR/C,SAASC,EAAT,GAA8D,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,IAAwBC,GAAQ,EAA3BC,SCNlC,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDNmE,mCAEpEM,EAAO,YAAIC,MADD,IACiBC,KAAI,iBAAM,MAG3C,OATe,SAAChB,EAAUc,GAC1Bd,EAASiB,SAAQ,SAACC,EAAOX,GAAR,OAAcO,EAAKP,EAAIO,EAAKF,QAAQO,KAAKD,MAM1DE,CAASpB,EAAUc,GAGjB,uCAAKO,oBAAA,EAAiB3B,UAAU,mBAAsBQ,GACnD,YAAIa,MANO,IAMSC,KAAI,SAACM,EAAGC,GAAJ,OACvB,yBAAK7B,UAAU,eAAeY,IAAKiB,EAAOtB,IAAKA,GAC5Ca,EAAKS,Q,gBE4DDC,UApEa,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAC3BjC,EAAmBiC,EAAnBjC,KAAMD,EAAakC,EAAblC,SADuC,EAETiC,EAAKE,eAAe/B,YAAxDE,EAF6C,EAE7CA,MAAO8B,EAFsC,EAEtCA,YAAaC,EAFyB,EAEzBA,YACtBC,EAAOL,EAAKE,eAAeG,KAC3BC,EAAgBN,EAAKO,QAAQC,MAChCC,QAAO,YAAe,IAAZC,EAAW,EAAXA,KACHC,EAAkBD,GAAQA,EAAKC,gBAC/BC,EAAMD,GAAmBA,EAAgBE,MAAMD,IAE/CE,EAAgBF,GAAOA,EAAIG,MADxB,YAIT,OAA2B,OAApBJ,IAA6BG,KAErCvB,KAAI,YACH,OADiB,EAAXmB,KACMC,gBAAgBE,SAGhC,OACE,kBAACG,EAAA,EAAD,KACE,yBAAK/C,UAAU,yBACb,yBAAKA,UAAU,0BACb,wBAAIA,UAAU,kBAAkBI,GAChC,uBAAGJ,UAAU,0BAA0BgD,KAAMd,GAA7C,kBAIF,yBAAKe,wBAAyB,CAAEC,OAAQd,KACvCD,GACC,kBAAC9B,EAAD,KACGgC,EAAcf,KAAI,SAAC6B,EAAOtB,GACzB,OACE,uBAAGjB,IAAKiB,EAAO7B,UAAU,qBAAqBgD,KAAMG,EAAMR,KACxD,kBAAC,IAAD,CAAKC,MAAOO,UAOxB,kBAACC,EAAA,EAAD,CAAoBrD,KAAMA,EAAMD,SAAUA","file":"component---src-templates-portfolio-post-single-js-590f737472d88909a89a.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default ({ previous, next }) => (\n  <div className=\"blog_nav\">\n    <div className={`blog_nav-next ${previous && \"blog_nav-previous_chevron\"}`}>\n      {previous && (\n        <Link to={previous.frontmatter.path}>\n          {`${previous.frontmatter.title}`}\n        </Link>\n      )}\n    </div>\n    <div className={`blog_nav-next ${next && \"blog_nav-next_chevron\"}`}>\n      {next && (\n        <Link to={next.frontmatter.path}>{`${next.frontmatter.title}`}</Link>\n      )}\n    </div>\n  </div>\n)\n","import React from \"react\"\n\nconst fillCols = (children, cols) => {\n  children.forEach((child, i) => cols[i % cols.length].push(child))\n}\n\nexport default function Masonry({ children, gap, minWidth = 500, ...rest }) {\n  const numCols = 3\n  const cols = [...Array(numCols)].map(() => [])\n  fillCols(children, cols)\n\n  return (\n    <div data-uk-lightbox className=\"masonry-columns\" {...rest}>\n      {[...Array(numCols)].map((_, index) => (\n        <div className=\"masonry-item\" key={index} gap={gap}>\n          {cols[index]}\n        </div>\n      ))}\n    </div>\n  )\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport Layout from \"src/components/Layout\"\nimport MasonryCols from \"src/components/MasonryCols\"\nimport BlogPostNavigation from \"src/components/BlogPostNavigation\"\n\nconst PortfolioPostSingle = ({ data, pageContext }) => {\n  const { next, previous } = pageContext\n  const { title, projectLink, showMasonry } = data.markdownRemark.frontmatter\n  const html = data.markdownRemark.html\n  const masonryImages = data.allFile.edges\n    .filter(({ node }) => {\n      const childImageSharp = node && node.childImageSharp\n      const src = childImageSharp && childImageSharp.fluid.src\n      let re = /featured/\n      const foundFeatured = src && src.match(re)\n\n      // Filter for file nodes that have images and are not featured images\n      return childImageSharp !== null && !foundFeatured\n    })\n    .map(({ node }) => {\n      return node.childImageSharp.fluid\n    })\n\n  return (\n    <Layout>\n      <div className=\"portfolio_single mb-4\">\n        <div className=\"portfolio_single-title\">\n          <h1 className=\"accent-heading\">{title}</h1>\n          <a className=\"portfolio_single-button\" href={projectLink}>\n            Visit Website\n          </a>\n        </div>\n        <div dangerouslySetInnerHTML={{ __html: html }} />\n        {showMasonry && (\n          <MasonryCols>\n            {masonryImages.map((image, index) => {\n              return (\n                <a key={index} className=\"image-link-wrapper\" href={image.src}>\n                  <Img fluid={image} />\n                </a>\n              )\n            })}\n          </MasonryCols>\n        )}\n      </div>\n      <BlogPostNavigation next={next} previous={previous} />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!, $directory: String!) {\n    markdownRemark(frontmatter: { path: { eq: $slug } }) {\n      html\n      frontmatter {\n        projectLink\n        title\n        showMasonry\n      }\n    }\n    allFile(filter: { relativeDirectory: { eq: $directory } }) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 1080) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`\nexport default PortfolioPostSingle\n"],"sourceRoot":""}